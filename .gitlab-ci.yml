image: maven:latest

cache:
  paths:
    - .m2/repository/
    - target/

stages:
  - test-server
  - build-client
  - build-server
  - deploy-heroku-staging-server

# test stage will compile the code and run all the unit tests present in the
# test folder.
Test:
  stage: test-server
  tags:
    - ugrad
  script:
    - cd server
    - mvn verify
    - ls target
  artifacts:
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml
    
# build stage will just build the codebase without running
# any tests or creating any jar file.
Build App 1/2:
  stage: build-server
  tags:
    - ugrad
  script:
    - cd server
    - mvn clean package -DskipTests=true
  artifacts:
    paths:
       - target/*.jar

Build App 2/2:
  stage: build-client
  image: node:15
  tags:
    - dalfcs_docker_autoscale
  script:
    - npm install
    - npm run build


## deploy stage will create package the jar and keep it in the target folder.
## The success of deploy stage will mark the pipeline as passed.
deploy:
  stage: deploy-heroku-staging-server
  image: ruby:latest
  tags:
    - dalfcs_docker_autoscale  
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:
    - cd server
    - dpl --provider=heroku --app=$HARSH_HEROKU_APP_NAME_STAGING --api-key=$HARSH_HEROKU_API_KEY

